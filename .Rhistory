my_sqrt <- sqrt(z-1)
my_sqrt
my_dic <- z / my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
lS()
ls
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
swtd("testdir/")
setwd("testdir/")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir/", recursive = TRUE)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "nrc")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(n=100, size = 1, prob = 0.7)
flipts2
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(y=cars$speed, x=cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15) )
plot(cars, pch = 2 )
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("KernSmooth")
library("KernSmooth")
library(datasets)
data(iris)
?iris
head(iris)
head(iris[iris$Species == virginica])
head(iris[iris$Species == "virginica"])
head(iris[, "virginica"])
?subset
subset(iris, Species=="virginica")
vs <- subset(iris, Species=="virginica")
vs
vs$Sepal.Length
mean(vs$Sepal.Length)
?rowMeans
rowMeans(iris[, 1:4])
names(iris)
head(iris[,1:4])
apply(iris[,1:4],2,mean)
sapply(iris[,1:4],2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls()
exit
q
exit()
d
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "data.csv")
data <- read.csv("data.csv")
summary(data)
data
data[VAL]
names(data)
data$VAL
summary(data$VAL)
names(data)
x < data$VAL
x <- data$VAL
x
x > 14
x[x>14]
x
bad <- is.na(x)
x[!bad]
good <- x[!bad]
count(good)
length(good)
good > 14
good[good>=14]
length(good[good>=14])
length(good[good>=24])
data$FES
ls
ls()
rm()
ls()
?rm
rm(ls())
rm(list = ls(all = TRUE))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "data.xlsx")
all <- read.xls("data.xlsx")
require(xlsReadWrite)
require(gdata)
install.packages("gdata")
require(gdata)
all <- read.xls("data.xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rjava)
Sys.setenv(JAVA_HOME="c:\\Program Files\\Java\\jre1.8.0_25")
library(rJava)
Sys.setenv(JAVA_HOME="c:\\Program Files\\Java\\jdk1.8.0_20")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="c:\\Program Files\\Java\\jdk1.8.0_20\\jre")
library(rJava)
library(xlsx)
getWd()
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "file.xlsx")
data <- read.xlsx("file.xlsx")
data <- read.xlsx("file.xlsx",sheedInder=1,header=TRUE)
data <- read.xlsx("file.xlsx",sheetIndex=1,header=TRUE)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,header=TRUE)
head(data)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1)
data[18:23, 7:15]
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,header=TRUE)
data[18:23, 7:15]
data[18:22, 7:15]
dat <- data[18:22, 7:15]
names(dat)
names(dat) <- c("Zip", "CuCurrent", "PaCurrent", "PoCurrent", "Contact", "Ext", "Fax", "email", "Status")
dat
sum(dat$Zip*dat$Ext,na.rm=T)
dat$Zip
456*80120
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "data.xml")
data <- read.xml("data.xml")
cols <- 7:15
rows <- 18:23
dat <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=cols,rowIndex=rows)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("http://www.w3schools.com/xml/simple.xml", useInternal=TRUE)
doc
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
library(RCurl)
xml <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", ssl.verifypeer = FALSE)
doc <- xmlParse(xml)
doc
xpathSApply(doc, "//zipcode", xmlValue)
zips <- xpathSApply(doc, "//zipcode", xmlValue)
zips[zips == "21231"]
legnth(zips[zips == "21231"])
length(zips[zips == "21231"])
library(jsonlite)
data <- fromJSON("https://api.github.com/users/nunorc/repos")
install.packages("curl")
data <- fromJSON("https://api.github.com/users/nunorc/repos")
data
names(data)
json <- toJSON(data, pretty=TRUE)
cat(json)
rm(ls())
rm(list = ls(all = TRUE))
file.download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data.csv")
getwd()
DT <- read.table("data.csv", header=TRUE, sep=",")
DT
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
require(microbenchmark)
packages.install("require(microbenchmark)")
install.packages("require(microbenchmark)")
install.packages("microbenchmark")
require(microbenchmark)
microbenchmark(tapply(DT$pwgtp15,DT$SEX,mean))
microbenchmark(DT[,mean(pwgtp15),by=SEX])
microbenchmark(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
microbenchmark(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
library(sqldf)
packages.install('sqldf')
install.packages('sqldf')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', "data.csv")
acs <- read.csv("data.csv")
acs$AGEP
unique(acs$AGEP)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
nchar("<meta name="Distribution" content="Global" />")
str <- "<meta name="Distribution" content="Global" />"
nchar('<meta name="Distribution" content="Global" />')
nchar('<script type="text/javascript">')
nchar('})();')
nchar('  })();')
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(url)
con
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
View(BodyWeight)
library(ggplo2)
library(ggplot2)
View(mpg)
qplot(displ, hmy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
library(datasets)
data(airquality)
View(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
View(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month)
)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
getwd()
setwd("C:/Users/nrc/playground//RepData_PeerAssessment1")
getwd()
setwd("C:/Users/nrc/playground/RepData_PeerAssessment1")
agg_interval[which.max(agg_interval$steps), ]$interval
activity <- read.csv("activity.csv", header = TRUE)
agg_interval <- aggregate(steps ~ interval, data = activity, FUN = mean, na.rm = TRUE)
which.max(agg_interval$steps)
View(agg_interval)
?which.max
agg_interval[which.max(agg_interval$steps), ]$interval
getStepsForInterval <- function(interval) {
agg_interval[agg_interval$interval == interval, ]$steps
}
View(agg_interval)
getStepsForInterval(25)
View(activity)
getStepsForInterval(5)
activityComplete <- activity
sum(!complete.cases(activityComplete))
View(activityComplete)
is.na(activityComplete[1, ]$steps)
is.na(activityComplete[466, ]$steps)
?weekdays
as.Data("2012-10-01")
as.Date("2012-10-01")
dd <- as.Date("2012-10-01")
class(dd)
weekdays(dd)
weekdays(dd, abbreviate = TRUE)
as.POSIXlt(dd)
as.POSIXlt(dd)$wday
dd <- as.Date("2012-10-06")
as.POSIXlt(dd)$wday
weekdays(dd)
class("ola")
as.DateisWeekday <- function(s) {
d <- as.POSIXlt(as.Date(s))
if (d$wkday < 6) {
return "weekday"
}
else {
return "weekend"
}
}
isWeekday <- function(s) {
d <- as.POSIXlt(as.Date(s))
if (d$wkday < 6) {
return "weekday"
}
else {
return "weekend"
}
}
isWeekday <- function(s) {
d <- as.POSIXlt(as.Date(s))
if (d$wkday < 6) {
return("weekday")
}
else {
return("weekend")
}
}
isWeekday("2015-07-17")
isWeekday <- function(s) {
d <- as.POSIXlt(as.Date(s))
if (d$wday < 6) {
return("weekday")
}
else {
return("weekend")
}
}
isWeekday("2015-07-17")
isWeekday("2015-07-18")
?factor
whichDay <- function(s) {
d <- as.POSIXlt(as.Date(s))
if (d$wday < 6) {
return("weekday")
}
else {
return("weekend")
}
}
whichDay("2015-07-18")
whichDay("2015-07-17")
zbr <- sapply(activityComplete$date, FUN = whichDay)
View(zbr)
length(zbr)
activityComplete$day <- factor(zbr)
View(activityComplete)
str(activityComplete)
str(zbr)
agg <- aggregate(steps ~ interval + day, activityComplete, mean)
View(agg)
library(lattice)
yplot(steps ~ interval | factor(day), data = agg, type = "l")
xyplot(steps ~ interval | factor(day), data = agg, type = "l")
xyplot(steps ~ interval | factor(day), data = agg, type = "l", aspect = 1/2)
